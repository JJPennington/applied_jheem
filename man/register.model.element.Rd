% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SPECIFICATION_model_specification.R
\name{register.model.element}
\alias{register.model.element}
\title{Register a Model Element}
\usage{
register.model.element(
  specification,
  name,
  scale,
  dimensions = NULL,
  dimension.values = NULL,
  resolve.dimension.values.against.model = T,
  value = NULL,
  get.value.function = NULL,
  functional.form = NULL,
  get.functional.form.function = NULL,
  functional.form.scale = scale,
  functional.form.from.time = NULL,
  functional.form.to.time = Inf,
  get.functional.form.function.name = NULL,
  get.value.function.name = NULL,
  ...,
  ramp.scale = scale,
  ramp.times = numeric(),
  ramp.values = numeric(),
  ramp.value.application = c("multiplier", "absolute")[1],
  ramp.interpolate.links = "identity",
  taper.scale = scale,
  taper.times = numeric(),
  taper.values = numeric(),
  taper.value.application = c("multiplier", "absolute")[1],
  taper.interpolate.links = "identity"
)
}
\arguments{
\item{specification}{The jheem.specification object}

\item{name}{The name of the model element. Cannot overlap with the names of model quantities}

\item{scale}{The scale for this model.element. Can be 'rate', 'ratio', 'proportion', 'time', 'number', 'non.negative.number'}

\item{dimensions}{Optional parameter to specify which dimensions the model.element is expected to take}

\item{dimension.values}{Optional parameter to specify which dimension.values the model.element will use in its dimension names}

\item{value}{A numeric value that serves as the value for this element if it is not otherwise specified. If NULL, then a value must be specified either by a get.value.function (a function which returns a value), or by a functional.form}

\item{get.value.function}{An alternative to passing value directly, if the value needs to be different by location. This should be a function that takes arguments location, specification, and ...}

\item{functional.form}{An object of class 'functional.form' that produces the background values for this element. Pass NULL if no functional.form is to be used, or if it is to be obtained by get.functional.form.function}

\item{get.functional.form.function}{An alternative to passing background functional.form directly, if the background functional.form needs to be different by location. This should be a function that takes arguments location, specification, and ...}

\item{functional.form.scale}{The scale of values produced by the background functional.form}

\item{functional.form.from.time, functional.form.to.time}{The time frame over which the functional.form applies}

\item{get.value.function.name, get.functional.form.function.name}{Optional - the actual names of the functions passed to 'get.value.function' or 'get.functional.form.function' - used to make error messages more informative}

\item{...}{Arguments to be passed to either get.functional.form.function or get.value.function}

\item{ramp.scale, taper.scale}{If the ramp or taper operates on a different scale than the element evaluates to, specified here}

\item{ramp.times, taper.times}{The (default) times at which to ramp up to taper down}

\item{ramp.values, taper.values}{The (default) multipliers for ramp or taper times}

\item{ramp.value.application, taper.value.application}{How to interpret ramp and taper values. 'multiplier' multiplies the ramp by the first functional.form-generated value (and taper by the last functional.form-generated value). 'absolute' just plugs in the value directly}

\item{ramp.interpolate.links, taper.interpolate.links}{The name(s) of link function (either 'identity', 'log', or 'exp') denoting the scale at which to interpolate values for the ramp or taper. Can be either a single value (applied to all elements in the ramp), or a vector of length(ramp.times) or length(taper.times)}

\item{resolve.dimension.values.against.model.ontologies}{A logical indicating whether, if dimension.values are supplied, they should be resolved against model ontologies and have compartment.value.aliases for the model specification applied to them}
}
\description{
Register a Model Element
}
